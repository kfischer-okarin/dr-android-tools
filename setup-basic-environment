#!/bin/bash

source $(dirname $0)/lib/common.sh

# Unevaluated strings so we can print them in the help message
DEFAULT_SDK_ROOT_CANDIDATES=(
  '$ANDROID_HOME' # Prefer the ANDROID_HOME environment variable
  '$HOME/Library/Android/sdk' # macOS default
  '$HOME/Android/Sdk' # Linux default
)

print_usage() {
  echo "Usage: $executable_name [<path-to-cmdline-tools>]"
  echo
  echo "This script installs the necessary Android SDK components for DragonRuby."
  echo
  echo "The script tries to find the command line tools in the following directories:"
  for candidate in "${DEFAULT_SDK_ROOT_CANDIDATES[@]}"; do
    echo "  - $candidate"
  done
  echo
  echo "You can also specify the path to the command line tools as an argument."
  echo "You have to do this if the command line tools are not in one of the default directories."
}

if [ "$1" == "--help" ]; then
  print_usage
  exit
fi

default_path_to_cmdline_tools() {
  for candidate in "${DEFAULT_SDK_ROOT_CANDIDATES[@]}"; do
    candidate=$(eval echo $candidate)
    if [[ -n "$candidate" && -d "$candidate/cmdline-tools" ]]; then
      echo "$candidate/cmdline-tools"
      return
    fi
  done
  echo ""
}

path_to_cmdline_tools=${1:-$(default_path_to_cmdline_tools)}

if [[ -z "$path_to_cmdline_tools" ]]; then
  echo "Error: Could not find the command line tools. Please specify the path to the command line tools." >&2
  echo >&2
  print_usage
  exit 1
fi

log "Checking for Java"
if ! java -version > /dev/null 2>&1; then
  echo "Error: Java is not installed. Please install Java and try again." >&2
  exit 1
fi

if [ -f .gitignore ] && ! grep "./android" .gitignore > /dev/null; then
  log "Adding android/ to .gitignore"
  echo "./android" >> .gitignore
fi

mkdir -p android

if [ -d android/cmdline-tools ]; then
  log "cmdline-tools already exists, skipping copy"
else
  log "Copying cmdline-tools from $path_to_cmdline_tools to android/cmdline-tools"
  cp -r $path_to_cmdline_tools android/cmdline-tools
fi

log "Accepting licenses"
yes | sdkmanager --licenses > /dev/null 2>&1

# Contains adb for installing APKs, debugging, etc.
if [ -d android/platform-tools ]; then
  log "platform-tools already exists, skipping download"
else
  log "Installing Platform Tools"
  sdkmanager --install 'platform-tools'
fi

# For extracting APKs from aab files
if [ -f android/bundletool.jar ]; then
  log "bundletool already exists, skipping download"
else
  log "Installing bundletool $BUNDLETOOL_VERSION"
  curl -L -o android/bundletool.jar \
       https://github.com/google/bundletool/releases/download/$BUNDLETOOL_VERSION/bundletool-all-$BUNDLETOOL_VERSION.jar
fi

# Contains apksigner for signing APKs
if [ -d android/build-tools ]; then
  log "build-tools already exists, skipping download"
else
  log "Installing Build Tools $BUILD_TOOLS_VERSION"
  sdkmanager --install "build-tools;$BUILD_TOOLS_VERSION"
fi
